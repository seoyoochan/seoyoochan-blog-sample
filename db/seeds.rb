# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)


u = User.new(email: 'admin@admin.com', first_name: 'admin', last_name: 'Seo', gender: 'male', locale: 'en')
u.add_role :admin
u.skip_confirmation!
u.save(validate: false)

Category.create(name: 'Cooking', created_at: Time.now, updated_at: Time.now, user_id: 1)
Category.create(name: 'Design', created_at: Time.now, updated_at: Time.now, user_id: 1)
Category.create(name: 'Programming', created_at: Time.now, updated_at: Time.now, user_id: 1)
Category.create(name: 'Articles', created_at: Time.now, updated_at: Time.now, user_id: 1)

Post.create(title: "Programming With Yii2: Integrating User Registration", user_id: 1, created_at: Time.now, updated_at: Time.now, slug: "programming-with-yii2-integrating-user-registration",
            body: "<p><em>If you're asking, \"What's Yii?\", check out my earlier tutorial: </em><a href=\"http://code.tutsplus.com/articles/introduction-to-the-yii-framework--cms-20948\"><em>Introduction to the Yii Framework</em></a><em>, which reviews the benefits of Yii and includes an overview of what's new in Yii 2.0, released October 12th, 2014.</em></p><p>This is part four of a series on Yii2. In <a href=\"http://code.tutsplus.com/tutorials/programming-with-yii2-getting-started--cms-22440\">Programming With Yii2: Getting Started</a>, we set up Yii2 locally, built a Hello World application, set up a remote server, and used Github to deploy our code. In <a href=\"http://code.tutsplus.com/tutorials/programming-with-yii2-exploring-mvc-forms-and-layouts--cms-22682\">part two</a>, we learned about Yii's implementation of its Model View Controller architecture and how to build web pages and forms that collect and validate data. In <a href=\"http://code.tutsplus.com/tutorials/programming-with-yii2-working-with-the-database-and-active-record--cms-22768\">part three</a>, we learned about working with databases and ActiveRecord. In this tutorial, we'll walk you through integrating a popular user registration plugin.</p><p>For these examples, we'll continue building on our hello app available in the <a href=\"https://github.com/newscloud/hello/releases/tag/user-registration\">Tuts+ repository</a> so that you can follow along.</p><h2>User Registration for Your Web Application</h2><p>Almost any web application of any usefulness requires some form of user registration. Yii provides a couple of ways to approach user registration, both relatively straightforward. This is one of the things I like about using Yii over vanilla PHPâ€”in moments, I can have a fully featured web application framework ready to build cool stuff on.</p><p>There are few reasons to rebuild the wheel and code user authentication and its many requirements and corollary features from scratch, e.g. sending emails and authentication for registration verification, password recovery, third party social authentication, et al. </p><p>The <a href=\"http://www.yiiframework.com/doc-2.0/guide-tutorial-advanced-app.html\">Yii2 Advanced Application Template</a> provides built-in user registration; we're using this approach in my <a href=\"http://code.tutsplus.com/tutorials/building-your-startup-with-php-getting-started--cms-21948\">Building Your Startup</a> series. However, in this series, we've been building on Yii2's basic application template. The default basic application template includes hard coded user login, which isn't very useful.</p><figure><img alt=\"Yii2 Basic Application Template Static Login\" src=\"https://cms-assets.tutsplus.com/uploads/users/317/posts/22974/image/static-login.jpeg\" style=\"outline: rgb(211, 211, 211) solid 1px; margin: 1px;\"></figure><p>Another approach to user registration is to use third party extensions. For this tutorial, I'll walk you through using <a href=\"https://twitter.com/dmeroff_en\">Dmitry Erofeev</a>'s <a href=\"https://github.com/dektrium/yii2-user\">Yii2-User extension</a>.<a href=\"http://yii2-user.readthedocs.org/en/latest/index.html\">Documentation for Yii2-User is available here</a>. Erofeev's building <a href=\"https://github.com/dektrium\">other plugins for Yii2</a> as well.</p><figure><img alt=\"Dektriums Yii2-User Documentation\" src=\"https://cms-assets.tutsplus.com/uploads/users/317/posts/22974/image/yii2-user-documentation.jpeg\" style=\"outline: rgb(211, 211, 211) solid 1px; margin: 1px;\"></figure><h2>Installation of Yii2-User</h2><p>Let's get started installing the Yii2-User extension. We'll follow the <a href=\"https://github.com/dektrium/yii2-user/blob/master/docs/installation.md\">installation instructions</a>.</p><h3>Installing Yii2-User With Composer</h3><p>First, we need to add Yii2-User to composer's required extensions. Edit the /composer.json file to include Yii2-User:</p><table><tbody><tr><td>12<p>3</p><p>4</p><p>5</p><p>6</p><p>7</p></td><td><div><code>\"require\"</code><code>: {</code><p><code>\"php\"</code><code>: </code><code>\"&gt;=5.4.0\"</code><code>,</code></p><p><code>\"yiisoft/yii2\"</code><code>: </code><code>\"*\"</code><code>,</code></p><p><code>\"yiisoft/yii2-bootstrap\"</code><code>: </code><code>\"*\"</code><code>,</code></p><p><code>\"yiisoft/yii2-swiftmailer\"</code><code>: </code><code>\"*\"</code><code>,</code></p><p><code>\"dektrium/yii2-user\"</code><code>: </code><code>\"*\"</code></p><p><code>},</code></p></div></td></tr></tbody></table><p>Then, when we update composer, you'll see something like this:</p><table><tbody><tr><td><div>0102<p>03</p><p>04</p><p>05</p><p>06</p><p>07</p><p>08</p><p>09</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p></div></td><td><div><code>Admins-MacBook-Pro-2:hello Jeff$ composer update</code><p><code>Loading composer repositories with package information</code></p><p><code>Updating dependencies (including require-dev)</code></p><p><code>- Removing yiisoft</code><code>/yii2-composer</code> <code>(2.0.0)  </code></p><p><code>- Installing yiisoft</code><code>/yii2-composer</code> <code>(2.0.1)</code></p><p><code>Downloading: 100%  </code></p><p><code>...</code></p><p><code>- Installing dektrium</code><code>/yii2-user</code> <code>(v0.8.2)</code></p><p><code>Downloading: 100%  </code></p><p><code>Writing lock </code><code>file</code></p><p><code>Generating autoload files</code></p></div></td></tr></tbody></table><h3>Update the Database</h3><p>Next, we run the database migration for Yii2-User. This creates the database tables that the extension requires. These will manage user accounts and credentials.</p><table><tbody><tr><td>0102<p>03</p><p>04</p><p>05</p><p>06</p><p>07</p><p>08</p><p>09</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p><p>42</p><p>43</p><p>44</p><p>45</p><p>46</p><p>47</p><p>48</p><p>49</p><p>50</p><p>51</p><p>52</p><p>53</p><p>54</p><p>55</p><p>56</p><p>57</p></td><td><div><code>hello Jeff$ php yii migrate</code><code>/up</code> <code>--migrationPath=@vendor</code><code>/dektrium/yii2-user/migrations</code><p><code>Yii Migration Tool (based on Yii v2.0.1)</code></p><p><code>Total 6 new migrations to be applied:</code></p><p><code>m140209_132017_init</code></p><p><code>m140403_174025_create_account_table</code></p><p><code>m140504_113157_update_tables</code></p><p><code>m140504_130429_create_token_table</code></p><p><code>m140830_171933_fix_ip_field</code></p><p><code>m140830_172703_change_account_table_name</code></p><p><code>Apply the above migrations? (</code><code>yes</code><code>|no) [no]:</code><code>yes</code></p><p><code>*** applying m140209_132017_init</code></p><p><code>&gt; create table {{%user}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.010s)</code></p><p><code>&gt; create unique index user_unique_username on {{%user}} (username) ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.015s)</code></p><p><code>&gt; create unique index user_unique_email on {{%user}} (email) ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.012s)</code></p><p><code>&gt; create unique index user_confirmation on {{%user}} (</code><code>id</code><code>, confirmation_token) ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.011s)</code></p><p><code>&gt; create unique index user_recovery on {{%user}} (</code><code>id</code><code>, recovery_token) ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.010s)</code></p><p><code>&gt; create table {{%profile}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.007s)</code></p><p><code>&gt; add foreign key fk_user_profile: {{%profile}} (user_id) references {{%user}} (</code><code>id</code><code>) ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.010s)</code></p><p><code>*** applied m140209_132017_init (</code><code>time</code><code>: 0.078s)</code></p><p><code>*** applying m140403_174025_create_account_table</code></p><p><code>&gt; create table {{%account}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.008s)</code></p><p><code>&gt; create unique index account_unique on {{%account}} (provider,client_id) ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.010s)</code></p><p><code>&gt; add foreign key fk_user_account: {{%account}} (user_id) references {{%user}} (</code><code>id</code><code>) ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.009s)</code></p><p><code>*** applied m140403_174025_create_account_table (</code><code>time</code><code>: 0.027s)</code></p><p><code>*** applying m140504_113157_update_tables</code></p><p><code>&gt; drop index user_confirmation ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.007s)</code></p><p><code>&gt; drop index user_recovery ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.008s)</code></p><p><code>&gt; drop column confirmation_token from table {{%user}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.009s)</code></p><p><code>&gt; drop column confirmation_sent_at from table {{%user}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.009s)</code></p><p><code>&gt; drop column recovery_token from table {{%user}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.007s)</code></p><p><code>&gt; drop column recovery_sent_at from table {{%user}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.008s)</code></p><p><code>&gt; drop column logged_in_from from table {{%user}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.007s)</code></p><p><code>&gt; drop column logged_in_at from table {{%user}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.008s)</code></p><p><code>&gt; rename column registered_from </code><code>in</code> <code>table {{%user}} to registration_ip ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.009s)</code></p><p><code>&gt; add column flags integer NOT NULL DEFAULT 0 to table {{%user}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.010s)</code></p><p><code>&gt; rename column properties </code><code>in</code> <code>table {{%account}} to data ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.008s)</code></p><p><code>*** applied m140504_113157_update_tables (</code><code>time</code><code>: 0.090s)</code></p><p><code>*** applying m140504_130429_create_token_table</code></p><p><code>&gt; create table {{%token}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.006s)</code></p><p><code>&gt; create unique index token_unique on {{%token}} (user_id,code,</code><code>type</code><code>) ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.010s)</code></p><p><code>&gt; add foreign key fk_user_token: {{%token}} (user_id) references {{%user}} (</code><code>id</code><code>) ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.009s)</code></p><p><code>*** applied m140504_130429_create_token_table (</code><code>time</code><code>: 0.026s)</code></p><p><code>*** applying m140830_171933_fix_ip_field</code></p><p><code>&gt; alter column registration_ip </code><code>in</code> <code>table {{%user}} to bigint ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.010s)</code></p><p><code>*** applied m140830_171933_fix_ip_field (</code><code>time</code><code>: 0.011s)</code></p><p><code>*** applying m140830_172703_change_account_table_name</code></p><p><code>&gt; rename table {{%account}} to {{%social_account}} ... </code><code>done</code> <code>(</code><code>time</code><code>: 0.001s)</code></p><p><code>*** applied m140830_172703_change_account_table_name (</code><code>time</code><code>: 0.002s)</code></p><p><code>Migrated up successfully.</code></p></div></td></tr></tbody></table><h3>Update the Configuration File</h3><p>Next, we need to tell Yii to use the Yii2-User component. In /config/web.php, we replace the default User component...</p><table><tbody><tr><td>12<p>3</p><p>4</p></td><td><div><code>'user'</code> <code>=&gt; [</code><p><code>'identityClass'</code> <code>=&gt; </code><code>'app\\models\\User'</code><code>,</code></p><p><code>'enableAutoLogin'</code> <code>=&gt; </code><code>true</code><code>,</code></p><p><code>],</code></p></div></td></tr></tbody></table><p>... with the Yii2-User component:</p><table><tbody><tr><td><div>12<p>3</p><p>4</p><p>5</p><p>6</p><p>7</p></div></td><td><div><code>'user'</code> <code>=&gt; [</code><p><code>'class'</code> <code>=&gt; </code><code>'dektrium\\user\\Module'</code><code>,</code></p><p><code>'enableUnconfirmedLogin'</code> <code>=&gt; </code><code>true</code><code>,</code></p><p><code>'confirmWithin'</code> <code>=&gt; 21600,</code></p><p><code>'cost'</code> <code>=&gt; 12,</code></p><p><code>'admins'</code> <code>=&gt; [</code><code>'admin'</code><code>]</code></p><p><code>],</code></p></div></td></tr></tbody></table><h3>Activate the SwiftMailer</h3><p>Since Yii2-User uses email to send out registration confirmations and forgotten passwords, it's time to activate our SwiftMailer configuration. In config/web.php, replace the default Mailer configuration here...</p><table><tbody><tr><td>12<p>3</p><p>4</p><p>5</p><p>6</p><p>7</p></td><td><div><code>'mailer'</code> <code>=&gt; [</code><p><code>'class'</code> <code>=&gt; </code><code>'yii\\swiftmailer\\Mailer'</code><code>,</code></p><p><code>// send all mails to a file by default. You have to set</code></p><p><code>// 'useFileTransport' to false and configure a transport</code></p><p><code>// for the mailer to send real emails.</code></p><p><code>'useFileTransport'</code> <code>=&gt; true,</code></p><p><code>],</code></p></div></td></tr></tbody></table><p>... with thisâ€”you'll need to include your own SMTP credentials:</p><table><tbody><tr><td><div>0102<p>03</p><p>04</p><p>05</p><p>06</p><p>07</p><p>08</p><p>09</p><p>10</p><p>11</p><p>12</p><p>13</p></div></td><td><div><code>'mailer'</code> <code>=&gt; [</code><p><code>'class'</code> <code>=&gt; </code><code>'yii\\swiftmailer\\Mailer'</code><code>,</code></p><p><code>'viewPath'</code> <code>=&gt; </code><code>'@app/mailer'</code><code>,</code></p><p><code>'useFileTransport'</code> <code>=&gt; false,</code></p><p><code>'transport'</code> <code>=&gt; [</code></p><p><code>'class'</code> <code>=&gt; </code><code>'Swift_SmtpTransport'</code><code>,</code></p><p><code>'host'</code> <code>=&gt; </code><code>'your-host-domain e.g. smtp.gmail.com'</code><code>,</code></p><p><code>'username'</code> <code>=&gt; </code><code>'your-email-or-username'</code><code>,</code></p><p><code>'password'</code> <code>=&gt; </code><code>'your-password'</code><code>,</code></p><p><code>'port'</code> <code>=&gt; </code><code>'587'</code><code>,</code></p><p><code>'encryption'</code> <code>=&gt; </code><code>'tls'</code><code>,</code></p><p><code>],</code></p><p><code>],</code></p></div></td></tr></tbody></table><h2>Integration of Yii2-User</h2><p>Now, we need to link our navigation bar to the Yii2-User controller paths. In /views/layouts/main.php, we update the navigation bar array definition for the Bootstrap menu. Replace the current navigation bar...</p><table><tbody><tr><td><div>0102<p>03</p><p>04</p><p>05</p><p>06</p><p>07</p><p>08</p><p>09</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p></div></td><td><div><code>echo</code> <code>Nav::widget([</code><p><code>'options'</code> <code>=&gt; [</code><code>'class'</code> <code>=&gt; </code><code>'navbar-nav navbar-right'</code><code>],</code></p><p><code>'items'</code> <code>=&gt; [</code></p><p><code>[</code><code>'label'</code> <code>=&gt; </code><code>'Home'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/site/index'</code><code>]],</code></p><p><code>[</code><code>'label'</code> <code>=&gt; </code><code>'Status'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/status/index'</code><code>]],</code></p><p><code>[</code><code>'label'</code> <code>=&gt; </code><code>'About'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/site/about'</code><code>]],</code></p><p><code>[</code><code>'label'</code> <code>=&gt; </code><code>'Contact'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/site/contact'</code><code>]],</code></p><p><code>Yii::</code><code>$app</code><code>-&gt;user-&gt;isGuest ?</code></p><p><code>[</code><code>'label'</code> <code>=&gt; </code><code>'Login'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/site/login'</code><code>]] :</code></p><p><code>[</code><code>'label'</code> <code>=&gt; </code><code>'Logout ('</code> <code>. Yii::</code><code>$app</code><code>-&gt;user-&gt;identity-&gt;username . </code><code>')'</code><code>,</code></p><p><code>'url'</code> <code>=&gt; [</code><code>'/site/logout'</code><code>],</code></p><p><code>'linkOptions'</code> <code>=&gt; [</code><code>'data-method'</code> <code>=&gt; </code><code>'post'</code><code>]],</code></p><p><code>],</code></p><p><code>]);</code></p></div></td></tr></tbody></table><p>... with the following array definition:</p><table><tbody><tr><td><div>0102<p>03</p><p>04</p><p>05</p><p>06</p><p>07</p><p>08</p><p>09</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p></div></td><td><div><code>$navItems</code><code>=[</code><p><code>[</code><code>'label'</code> <code>=&gt; </code><code>'Home'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/site/index'</code><code>]],</code></p><p><code>[</code><code>'label'</code> <code>=&gt; </code><code>'Status'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/status/index'</code><code>]],</code></p><p><code>[</code><code>'label'</code> <code>=&gt; </code><code>'About'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/site/about'</code><code>]],</code></p><p><code>[</code><code>'label'</code> <code>=&gt; </code><code>'Contact'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/site/contact'</code><code>]]</code></p><p><code>];</code></p><p><code>if</code> <code>(Yii::</code><code>$app</code><code>-&gt;user-&gt;isGuest) {</code></p><p><code>array_push</code><code>(</code><code>$navItems</code><code>,[</code><code>'label'</code> <code>=&gt; </code><code>'Sign In'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/user/login'</code><code>]],[</code><code>'label'</code> <code>=&gt; </code><code>'Sign Up'</code><code>, </code><code>'url'</code> <code>=&gt; [</code><code>'/user/register'</code><code>]]);</code></p><p><code>} </code><code>else</code> <code>{</code></p><p><code>array_push</code><code>(</code><code>$navItems</code><code>,[</code><code>'label'</code> <code>=&gt; </code><code>'Logout ('</code> <code>. Yii::</code><code>$app</code><code>-&gt;user-&gt;identity-&gt;username . </code><code>')'</code><code>,</code></p><p><code>'url'</code> <code>=&gt; [</code><code>'/site/logout'</code><code>],</code></p><p><code>'linkOptions'</code> <code>=&gt; [</code><code>'data-method'</code> <code>=&gt; </code><code>'post'</code><code>]]</code></p><p><code>);</code></p><p><code>}</code></p><p><code>echo</code> <code>Nav::widget([</code></p><p><code>'options'</code> <code>=&gt; [</code><code>'class'</code> <code>=&gt; </code><code>'navbar-nav navbar-right'</code><code>],</code></p><p><code>'items'</code> <code>=&gt; </code><code>$navItems</code><code>,</code></p><p><code>]);</code></p></div></td></tr></tbody></table><p>Reload the application and click the <strong>Sign Up</strong> link in the navigation bar. You should see something like this:</p><figure><img alt=\"Yii2-User Sign Up Page\" src=\"https://cms-assets.tutsplus.com/uploads/users/317/posts/22974/image/signup.jpeg\" style=\"outline: rgb(211, 211, 211) solid 1px; margin: 1px;\"></figure><p>When you click <strong>Sign Up</strong>, you'll see the confirmation notification. This tells us an email has been sent that we need to click on to verify our registration.</p><figure><img alt=\"Yii2-User Sign Up Confirmation Notice\" src=\"https://cms-assets.tutsplus.com/uploads/users/317/posts/22974/image/signup-confirm.jpeg\" style=\"outline: rgb(211, 211, 211) solid 1px; margin: 1px;\"></figure><p>You'll receive an email much like this one:</p><figure><img alt=\"Yii2-User Confirmation Email\" src=\"https://cms-assets.tutsplus.com/uploads/users/317/posts/22974/image/email-verify.jpeg\" style=\"outline: rgb(211, 211, 211) solid 1px; margin: 1px;\"></figure><p>Click on the link in the email and you'll see something like this:</p><figure><img alt=\"Yii2-User Sign Up Confirmation\" src=\"https://cms-assets.tutsplus.com/uploads/users/317/posts/22974/image/user-verified.jpeg\" style=\"outline: rgb(211, 211, 211) solid 1px; margin: 1px;\"></figure><p>Notice the login state maintained by Yii2 and the Yii2-User componentâ€”it's displayed in the navigation bar above. Click <strong>Logout</strong> and let's walk through the <strong>Sign In</strong> page:</p><figure><img alt=\"Yii2-User Sign In Form\" src=\"https://cms-assets.tutsplus.com/uploads/users/317/posts/22974/image/signin.jpeg\" style=\"outline: rgb(211, 211, 211) solid 1px; margin: 1px;\"></figure><p>Yii2-User also includes password recovery:</p><figure><img alt=\"Yii2-User Forgot Your Password\" src=\"https://cms-assets.tutsplus.com/uploads/users/317/posts/22974/image/forgot-pwd.jpeg\" style=\"outline: rgb(211, 211, 211) solid 1px; margin: 1px;\"></figure><p>Just like that, we have a hugely important core authentication component for our application.</p><p>Yii2-User also has a number of <a href=\"https://github.com/dektrium/yii2-user/blob/master/docs/configuration.md\">configuration features</a> which you can explore further on your own, e.g. third party social authentication. We'll likely return to them in a later tutorial.</p><h2>What's Next?\r\n<p>I hope you've found this useful for your own Yii2 web application. If you'd like to know when the next Yii2 tutorial arrives, follow me <a href=\"https://twitter.com/intent/user?screen_name=reifman\">@reifman</a> on Twitter or <a href=\"http://tutsplus.com/authors/jeff-reifman\">check my instructor page</a>. My instructor page will include all the articles from this series as soon as they are published.</p></h2>")